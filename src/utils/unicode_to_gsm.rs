use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
    pub static ref UNICODE_TO_GSM: HashMap<u32, Vec<u8>> = {
        let mut m = HashMap::new();
        m.insert(0x000a, vec![0x0a]);
        m.insert(0x000c, vec![0x1b, 0x0a]);
        m.insert(0x000d, vec![0x0d]);
        m.insert(0x0020, vec![0x20]);
        m.insert(0x0021, vec![0x21]);
        m.insert(0x0022, vec![0x22]);
        m.insert(0x0023, vec![0x23]);
        m.insert(0x0024, vec![0x02]);
        m.insert(0x0025, vec![0x25]);
        m.insert(0x0026, vec![0x26]);
        m.insert(0x0027, vec![0x27]);
        m.insert(0x0028, vec![0x28]);
        m.insert(0x0029, vec![0x29]);
        m.insert(0x002a, vec![0x2a]);
        m.insert(0x002b, vec![0x2b]);
        m.insert(0x002c, vec![0x2c]);
        m.insert(0x002d, vec![0x2d]);
        m.insert(0x002e, vec![0x2e]);
        m.insert(0x002f, vec![0x2f]);
        m.insert(0x0030, vec![0x30]);
        m.insert(0x0031, vec![0x31]);
        m.insert(0x0032, vec![0x32]);
        m.insert(0x0033, vec![0x33]);
        m.insert(0x0034, vec![0x34]);
        m.insert(0x0035, vec![0x35]);
        m.insert(0x0036, vec![0x36]);
        m.insert(0x0037, vec![0x37]);
        m.insert(0x0038, vec![0x38]);
        m.insert(0x0039, vec![0x39]);
        m.insert(0x003a, vec![0x3a]);
        m.insert(0x003b, vec![0x3b]);
        m.insert(0x003c, vec![0x3c]);
        m.insert(0x003d, vec![0x3d]);
        m.insert(0x003e, vec![0x3e]);
        m.insert(0x003f, vec![0x3f]);
        m.insert(0x0040, vec![0x00]);
        m.insert(0x0041, vec![0x41]);
        m.insert(0x0042, vec![0x42]);
        m.insert(0x0043, vec![0x43]);
        m.insert(0x0044, vec![0x44]);
        m.insert(0x0045, vec![0x45]);
        m.insert(0x0046, vec![0x46]);
        m.insert(0x0047, vec![0x47]);
        m.insert(0x0048, vec![0x48]);
        m.insert(0x0049, vec![0x49]);
        m.insert(0x004a, vec![0x4a]);
        m.insert(0x004b, vec![0x4b]);
        m.insert(0x004c, vec![0x4c]);
        m.insert(0x004d, vec![0x4d]);
        m.insert(0x004e, vec![0x4e]);
        m.insert(0x004f, vec![0x4f]);
        m.insert(0x0050, vec![0x50]);
        m.insert(0x0051, vec![0x51]);
        m.insert(0x0052, vec![0x52]);
        m.insert(0x0053, vec![0x53]);
        m.insert(0x0054, vec![0x54]);
        m.insert(0x0055, vec![0x55]);
        m.insert(0x0056, vec![0x56]);
        m.insert(0x0057, vec![0x57]);
        m.insert(0x0058, vec![0x58]);
        m.insert(0x0059, vec![0x59]);
        m.insert(0x005a, vec![0x5a]);
        m.insert(0x005b, vec![0x1b, 0x3c]);
        m.insert(0x005c, vec![0x1b, 0x2f]);
        m.insert(0x005d, vec![0x1b, 0x3e]);
        m.insert(0x005e, vec![0x1b, 0x14]);
        m.insert(0x005f, vec![0x11]);
        m.insert(0x0061, vec![0x61]);
        m.insert(0x0062, vec![0x62]);
        m.insert(0x0063, vec![0x63]);
        m.insert(0x0064, vec![0x64]);
        m.insert(0x0065, vec![0x65]);
        m.insert(0x0066, vec![0x66]);
        m.insert(0x0067, vec![0x67]);
        m.insert(0x0068, vec![0x68]);
        m.insert(0x0069, vec![0x69]);
        m.insert(0x006a, vec![0x6a]);
        m.insert(0x006b, vec![0x6b]);
        m.insert(0x006c, vec![0x6c]);
        m.insert(0x006d, vec![0x6d]);
        m.insert(0x006e, vec![0x6e]);
        m.insert(0x006f, vec![0x6f]);
        m.insert(0x0070, vec![0x70]);
        m.insert(0x0071, vec![0x71]);
        m.insert(0x0072, vec![0x72]);
        m.insert(0x0073, vec![0x73]);
        m.insert(0x0074, vec![0x74]);
        m.insert(0x0075, vec![0x75]);
        m.insert(0x0076, vec![0x76]);
        m.insert(0x0077, vec![0x77]);
        m.insert(0x0078, vec![0x78]);
        m.insert(0x0079, vec![0x79]);
        m.insert(0x007a, vec![0x7a]);
        m.insert(0x007b, vec![0x1b, 0x28]);
        m.insert(0x007c, vec![0x1b, 0x40]);
        m.insert(0x007d, vec![0x1b, 0x29]);
        m.insert(0x007e, vec![0x1b, 0x3d]);
        m.insert(0x00a1, vec![0x40]);
        m.insert(0x00a3, vec![0x01]);
        m.insert(0x00a4, vec![0x24]);
        m.insert(0x00a5, vec![0x03]);
        m.insert(0x00a7, vec![0x5f]);
        m.insert(0x00bf, vec![0x60]);
        m.insert(0x00c4, vec![0x5b]);
        m.insert(0x00c5, vec![0x0e]);
        m.insert(0x00c6, vec![0x1c]);
        m.insert(0x00c9, vec![0x1f]);
        m.insert(0x00d1, vec![0x5d]);
        m.insert(0x00d6, vec![0x5c]);
        m.insert(0x00d8, vec![0x0b]);
        m.insert(0x00dc, vec![0x5e]);
        m.insert(0x00df, vec![0x1e]);
        m.insert(0x00e0, vec![0x7f]);
        m.insert(0x00e4, vec![0x7b]);
        m.insert(0x00e5, vec![0x0f]);
        m.insert(0x00e6, vec![0x1d]);
        m.insert(0x00c7, vec![0x09]);
        m.insert(0x00e8, vec![0x04]);
        m.insert(0x00e9, vec![0x05]);
        m.insert(0x00ec, vec![0x07]);
        m.insert(0x00f1, vec![0x7d]);
        m.insert(0x00f2, vec![0x08]);
        m.insert(0x00f6, vec![0x7c]);
        m.insert(0x00f8, vec![0x0c]);
        m.insert(0x00f9, vec![0x06]);
        m.insert(0x00fc, vec![0x7e]);
        m.insert(0x0393, vec![0x13]);
        m.insert(0x0394, vec![0x10]);
        m.insert(0x0398, vec![0x19]);
        m.insert(0x039b, vec![0x14]);
        m.insert(0x039e, vec![0x1a]);
        m.insert(0x03a0, vec![0x16]);
        m.insert(0x03a3, vec![0x18]);
        m.insert(0x03a6, vec![0x12]);
        m.insert(0x03a8, vec![0x17]);
        m.insert(0x03a9, vec![0x15]);
        m.insert(0x20ac, vec![0x1b, 0x65]);
        m
    };
}
